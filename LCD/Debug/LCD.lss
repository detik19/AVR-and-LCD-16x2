
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000003fe  00000472  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000078  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a48  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002e6  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003cc  00000000  00000000  00001266  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000108  00000000  00000000  00001634  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000023f  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000004b1  00000000  00000000  0000197b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000058  00000000  00000000  00001e2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000054 <LcdCustomChar>:
  54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf e5       	ldi	r28, 0x5F	; 95
  9a:	d4 e0       	ldi	r29, 0x04	; 4
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	a0 e6       	ldi	r26, 0x60	; 96
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	ee ef       	ldi	r30, 0xFE	; 254
  a8:	f3 e0       	ldi	r31, 0x03	; 3
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	ae 37       	cpi	r26, 0x7E	; 126
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>
  b6:	0e 94 8d 01 	call	0x31a	; 0x31a <main>
  ba:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <lcd_cmd>:

void lcd_cmd(unsigned char cmd)	//Sends Command to LCD
{
	
	//4 bit part
	LDP=(cmd&0b11110000);
  c2:	98 2f       	mov	r25, r24
  c4:	90 7f       	andi	r25, 0xF0	; 240
  c6:	98 bb       	out	0x18, r25	; 24
	LCP|=1<<LCD_E;
  c8:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	e9 ef       	ldi	r30, 0xF9	; 249
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_cmd+0xc>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <lcd_cmd+0x12>
  d4:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
  d6:	c2 98       	cbi	0x18, 2	; 24
  d8:	e9 ef       	ldi	r30, 0xF9	; 249
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcd_cmd+0x1a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <lcd_cmd+0x20>
  e2:	00 00       	nop
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);
  e4:	f0 e1       	ldi	r31, 0x10	; 16
  e6:	8f 9f       	mul	r24, r31
  e8:	c0 01       	movw	r24, r0
  ea:	11 24       	eor	r1, r1
  ec:	88 bb       	out	0x18, r24	; 24
	LCP|=1<<LCD_E;
  ee:	c2 9a       	sbi	0x18, 2	; 24
  f0:	89 ef       	ldi	r24, 0xF9	; 249
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcd_cmd+0x32>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_cmd+0x38>
  fa:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
  fc:	c2 98       	cbi	0x18, 2	; 24
  fe:	e9 ef       	ldi	r30, 0xF9	; 249
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <lcd_cmd+0x40>
 106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_cmd+0x46>
 108:	00 00       	nop
 10a:	08 95       	ret

0000010c <lcd_putchar>:
void lcd_putchar(unsigned char ch)		//Sends Char to LCD
{

	
	//4 bit part
	LDP=(ch&0b11110000);
 10c:	98 2f       	mov	r25, r24
 10e:	90 7f       	andi	r25, 0xF0	; 240
 110:	98 bb       	out	0x18, r25	; 24
	LCP|=1<<LCD_RS;
 112:	c0 9a       	sbi	0x18, 0	; 24
	LCP|=1<<LCD_E;
 114:	c2 9a       	sbi	0x18, 2	; 24
 116:	e9 ef       	ldi	r30, 0xF9	; 249
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_putchar+0xe>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_putchar+0x14>
 120:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 122:	c2 98       	cbi	0x18, 2	; 24
	LCP&=~(1<<LCD_RS);
 124:	c0 98       	cbi	0x18, 0	; 24
 126:	e9 ef       	ldi	r30, 0xF9	; 249
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_putchar+0x1e>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <lcd_putchar+0x24>
 130:	00 00       	nop
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
 132:	f0 e1       	ldi	r31, 0x10	; 16
 134:	8f 9f       	mul	r24, r31
 136:	c0 01       	movw	r24, r0
 138:	11 24       	eor	r1, r1
 13a:	88 bb       	out	0x18, r24	; 24
	LCP|=1<<LCD_RS;
 13c:	c0 9a       	sbi	0x18, 0	; 24
	LCP|=1<<LCD_E;
 13e:	c2 9a       	sbi	0x18, 2	; 24
 140:	89 ef       	ldi	r24, 0xF9	; 249
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_putchar+0x38>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_putchar+0x3e>
 14a:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 14c:	c2 98       	cbi	0x18, 2	; 24
	LCP&=~(1<<LCD_RS);
 14e:	c0 98       	cbi	0x18, 0	; 24
 150:	e9 ef       	ldi	r30, 0xF9	; 249
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_putchar+0x48>
 158:	00 c0       	rjmp	.+0      	; 0x15a <lcd_putchar+0x4e>
 15a:	00 00       	nop
 15c:	08 95       	ret

0000015e <LCDdefinechar>:
	_delay_ms(1);
	
}

void LCDdefinechar(const unsigned char *pc,unsigned char char_code){
 15e:	ef 92       	push	r14
 160:	ff 92       	push	r15
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	8c 01       	movw	r16, r24
	unsigned char a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 16c:	66 0f       	add	r22, r22
 16e:	66 0f       	add	r22, r22
 170:	66 0f       	add	r22, r22
 172:	60 64       	ori	r22, 0x40	; 64
 174:	e6 2e       	mov	r14, r22
	for (i=0; i<8; i++){
 176:	c0 e0       	ldi	r28, 0x00	; 0
 178:	d0 e0       	ldi	r29, 0x00	; 0
 17a:	f8 01       	movw	r30, r16
 17c:	ec 0f       	add	r30, r28
 17e:	fd 1f       	adc	r31, r29
		pcc=pgm_read_byte(&pc[i]);
 180:	f4 90       	lpm	r15, Z
		lcd_cmd(a++);
 182:	8c 2f       	mov	r24, r28
 184:	8e 0d       	add	r24, r14
 186:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_cmd>
		lcd_putchar(pcc);
 18a:	8f 2d       	mov	r24, r15
 18c:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_putchar>

void LCDdefinechar(const unsigned char *pc,unsigned char char_code){
	unsigned char a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 190:	21 96       	adiw	r28, 0x01	; 1
 192:	c8 30       	cpi	r28, 0x08	; 8
 194:	d1 05       	cpc	r29, r1
 196:	89 f7       	brne	.-30     	; 0x17a <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		lcd_cmd(a++);
		lcd_putchar(pcc);
	}
}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	ff 90       	pop	r15
 1a2:	ef 90       	pop	r14
 1a4:	08 95       	ret

000001a6 <lcd_init>:

void lcd_init(void)//Initializes LCD
{
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	85 ea       	ldi	r24, 0xA5	; 165
 1ae:	9e e0       	ldi	r25, 0x0E	; 14
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_init+0xa>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcd_init+0x10>
 1b6:	00 00       	nop
	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 1b8:	18 ba       	out	0x18, r1	; 24
	LCP=0x00;
 1ba:	18 ba       	out	0x18, r1	; 24
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 1bc:	87 b3       	in	r24, 0x17	; 23
 1be:	80 6f       	ori	r24, 0xF0	; 240
 1c0:	87 bb       	out	0x17, r24	; 23
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 1c2:	87 b3       	in	r24, 0x17	; 23
 1c4:	87 60       	ori	r24, 0x07	; 7
 1c6:	87 bb       	out	0x17, r24	; 23
	//---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 1c8:	80 e3       	ldi	r24, 0x30	; 48
 1ca:	88 bb       	out	0x18, r24	; 24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;
 1cc:	c2 9a       	sbi	0x18, 2	; 24
 1ce:	89 ef       	ldi	r24, 0xF9	; 249
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_init+0x2c>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_init+0x32>
 1d8:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 1da:	c2 98       	cbi	0x18, 2	; 24
 1dc:	89 ef       	ldi	r24, 0xF9	; 249
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_init+0x3a>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_init+0x40>
 1e6:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 1e8:	80 e3       	ldi	r24, 0x30	; 48
 1ea:	88 bb       	out	0x18, r24	; 24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;
 1ec:	c2 9a       	sbi	0x18, 2	; 24
 1ee:	89 ef       	ldi	r24, 0xF9	; 249
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_init+0x4c>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <lcd_init+0x52>
 1f8:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 1fa:	c2 98       	cbi	0x18, 2	; 24
 1fc:	89 ef       	ldi	r24, 0xF9	; 249
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_init+0x5a>
 204:	00 c0       	rjmp	.+0      	; 0x206 <lcd_init+0x60>
 206:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 208:	80 e2       	ldi	r24, 0x20	; 32
 20a:	88 bb       	out	0x18, r24	; 24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;
 20c:	c2 9a       	sbi	0x18, 2	; 24
 20e:	89 ef       	ldi	r24, 0xF9	; 249
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <lcd_init+0x6c>
 216:	00 c0       	rjmp	.+0      	; 0x218 <lcd_init+0x72>
 218:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 21a:	c2 98       	cbi	0x18, 2	; 24
 21c:	89 ef       	ldi	r24, 0xF9	; 249
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <lcd_init+0x7a>
 224:	00 c0       	rjmp	.+0      	; 0x226 <lcd_init+0x80>
 226:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	lcd_cmd(0b00101000);
 228:	88 e2       	ldi	r24, 0x28	; 40
 22a:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_cmd>
	//-----increment address, invisible cursor shift------
	lcd_cmd(0b00001100);
 22e:	8c e0       	ldi	r24, 0x0C	; 12
 230:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_cmd>
 234:	c4 e5       	ldi	r28, 0x54	; 84
 236:	d0 e0       	ldi	r29, 0x00	; 0
	//init 8 custom chars
	unsigned char ch=0, chn=0;
 238:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 23a:	11 e0       	ldi	r17, 0x01	; 1
 23c:	16 0f       	add	r17, r22
 23e:	ce 01       	movw	r24, r28
 240:	0e 94 af 00 	call	0x15e	; 0x15e <LCDdefinechar>
 244:	28 96       	adiw	r28, 0x08	; 8
	lcd_cmd(0b00101000);
	//-----increment address, invisible cursor shift------
	lcd_cmd(0b00001100);
	//init 8 custom chars
	unsigned char ch=0, chn=0;
	while(ch<64)
 246:	18 30       	cpi	r17, 0x08	; 8
 248:	11 f0       	breq	.+4      	; 0x24e <lcd_init+0xa8>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 24a:	61 2f       	mov	r22, r17
 24c:	f6 cf       	rjmp	.-20     	; 0x23a <lcd_init+0x94>

	


	
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	08 95       	ret

00000256 <lcd_clear>:

void lcd_clear()
{
	lcd_cmd(1<<LCD_CLR); 
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_cmd>
 25c:	83 ed       	ldi	r24, 0xD3	; 211
 25e:	90 e3       	ldi	r25, 0x30	; 48
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <lcd_clear+0xa>
 264:	00 c0       	rjmp	.+0      	; 0x266 <lcd_clear+0x10>
 266:	00 00       	nop
 268:	08 95       	ret

0000026a <lcd_putsf>:
	_delay_ms(50);
	
}

void lcd_putsf(const char *s)
{
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ec 01       	movw	r28, r24

	while (*s)
 270:	88 81       	ld	r24, Y
 272:	88 23       	and	r24, r24
 274:	31 f0       	breq	.+12     	; 0x282 <lcd_putsf+0x18>
 276:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_putchar(*s);
 278:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_putchar>
}

void lcd_putsf(const char *s)
{

	while (*s)
 27c:	89 91       	ld	r24, Y+
 27e:	81 11       	cpse	r24, r1
 280:	fb cf       	rjmp	.-10     	; 0x278 <lcd_putsf+0xe>
	{
		lcd_putchar(*s);
		s++;
	}
}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char x, unsigned char y)	//Cursor to X Y position
{
	register unsigned char DDRAMAddr;
	// remap lines into proper order
	switch(y)
 288:	62 30       	cpi	r22, 0x02	; 2
 28a:	31 f0       	breq	.+12     	; 0x298 <lcd_gotoxy+0x10>
 28c:	63 30       	cpi	r22, 0x03	; 3
 28e:	31 f0       	breq	.+12     	; 0x29c <lcd_gotoxy+0x14>
 290:	61 30       	cpi	r22, 0x01	; 1
 292:	29 f4       	brne	.+10     	; 0x29e <lcd_gotoxy+0x16>
	{
		case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
		case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 294:	80 5c       	subi	r24, 0xC0	; 192
 296:	03 c0       	rjmp	.+6      	; 0x29e <lcd_gotoxy+0x16>
		case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 298:	8c 5e       	subi	r24, 0xEC	; 236
 29a:	01 c0       	rjmp	.+2      	; 0x29e <lcd_gotoxy+0x16>
		case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 29c:	8c 5a       	subi	r24, 0xAC	; 172
		default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	lcd_cmd(1<<LCD_DDRAM | DDRAMAddr);
 29e:	80 68       	ori	r24, 0x80	; 128
 2a0:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_cmd>
 2a4:	08 95       	ret

000002a6 <lcd_putInt>:
	}

}
*/
void lcd_putInt(int integer )
{
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	ec 01       	movw	r28, r24

	unsigned char thousands,hundreds,tens,ones;
	thousands = integer / 1000;
 2b0:	68 ee       	ldi	r22, 0xE8	; 232
 2b2:	73 e0       	ldi	r23, 0x03	; 3
 2b4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__divmodhi4>
 2b8:	16 2f       	mov	r17, r22

	lcd_putchar(thousands + 0x30);
 2ba:	80 e3       	ldi	r24, 0x30	; 48
 2bc:	86 0f       	add	r24, r22
 2be:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_putchar>

	hundreds = ((integer - thousands*1000)-1) / 100;
 2c2:	28 e1       	ldi	r18, 0x18	; 24
 2c4:	3c ef       	ldi	r19, 0xFC	; 252
 2c6:	12 9f       	mul	r17, r18
 2c8:	c0 01       	movw	r24, r0
 2ca:	13 9f       	mul	r17, r19
 2cc:	90 0d       	add	r25, r0
 2ce:	11 24       	eor	r1, r1
 2d0:	8c 0f       	add	r24, r28
 2d2:	9d 1f       	adc	r25, r29
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	04 e6       	ldi	r16, 0x64	; 100
 2d8:	10 e0       	ldi	r17, 0x00	; 0
 2da:	b8 01       	movw	r22, r16
 2dc:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__divmodhi4>

	lcd_putchar( hundreds + 0x30);
 2e0:	80 e3       	ldi	r24, 0x30	; 48
 2e2:	86 0f       	add	r24, r22
 2e4:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_putchar>
	tens=(integer%100)/10;
 2e8:	ce 01       	movw	r24, r28
 2ea:	b8 01       	movw	r22, r16
 2ec:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__divmodhi4>
 2f0:	0a e0       	ldi	r16, 0x0A	; 10
 2f2:	10 e0       	ldi	r17, 0x00	; 0
 2f4:	b8 01       	movw	r22, r16
 2f6:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__divmodhi4>

	lcd_putchar( tens + 0x30);
 2fa:	80 e3       	ldi	r24, 0x30	; 48
 2fc:	86 0f       	add	r24, r22
 2fe:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_putchar>
	ones=integer%10;
 302:	ce 01       	movw	r24, r28
 304:	b8 01       	movw	r22, r16
 306:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__divmodhi4>

	lcd_putchar( ones + 0x30);
 30a:	80 5d       	subi	r24, 0xD0	; 208
 30c:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_putchar>
}
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	08 95       	ret

0000031a <main>:
{
		
	
	unsigned int temp;
	
	DDRB = 0xFF;		//set the PORTB Direction Set every pin of PORTB as out as our lcd on this
 31a:	8f ef       	ldi	r24, 0xFF	; 255
 31c:	87 bb       	out	0x17, r24	; 23
	

	
	
	lcd_init();
 31e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_init>
	lcd_clear();
 322:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_clear>

	lcd_putsf("Halo dari LCD");
 326:	80 e6       	ldi	r24, 0x60	; 96
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_putsf>
 32e:	2f e7       	ldi	r18, 0x7F	; 127
 330:	8a e1       	ldi	r24, 0x1A	; 26
 332:	96 e0       	ldi	r25, 0x06	; 6
 334:	21 50       	subi	r18, 0x01	; 1
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <main+0x1a>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <main+0x24>
 33e:	00 00       	nop
		
		
		
		temp = 12;

		lcd_gotoxy(1,1 );			//set the cursor to 1 column of 1st row
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 44 01 	call	0x288	; 0x288 <lcd_gotoxy>
		lcd_putsf("Hay!");		
 348:	8e e6       	ldi	r24, 0x6E	; 110
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_putsf>
		lcd_putInt(temp);		// print adc value to the lcd
 350:	8c e0       	ldi	r24, 0x0C	; 12
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_putInt>
 358:	2f e7       	ldi	r18, 0x7F	; 127
 35a:	8a e1       	ldi	r24, 0x1A	; 26
 35c:	96 e0       	ldi	r25, 0x06	; 6
 35e:	21 50       	subi	r18, 0x01	; 1
 360:	80 40       	sbci	r24, 0x00	; 0
 362:	90 40       	sbci	r25, 0x00	; 0
 364:	e1 f7       	brne	.-8      	; 0x35e <main+0x44>
 366:	00 c0       	rjmp	.+0      	; 0x368 <main+0x4e>
 368:	00 00       	nop
		_delay_ms(500);
		
		lcd_clear();
 36a:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_clear>
		lcd_putsf("bersih123");
 36e:	83 e7       	ldi	r24, 0x73	; 115
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_putsf>
 376:	2f e7       	ldi	r18, 0x7F	; 127
 378:	8a e1       	ldi	r24, 0x1A	; 26
 37a:	96 e0       	ldi	r25, 0x06	; 6
 37c:	21 50       	subi	r18, 0x01	; 1
 37e:	80 40       	sbci	r24, 0x00	; 0
 380:	90 40       	sbci	r25, 0x00	; 0
 382:	e1 f7       	brne	.-8      	; 0x37c <main+0x62>
 384:	00 c0       	rjmp	.+0      	; 0x386 <main+0x6c>
 386:	00 00       	nop
		
		_delay_ms(500);
		lcd_clear();
 388:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_clear>
		lcd_putchar('g');
 38c:	87 e6       	ldi	r24, 0x67	; 103
 38e:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_putchar>
 392:	2f e7       	ldi	r18, 0x7F	; 127
 394:	8a e1       	ldi	r24, 0x1A	; 26
 396:	96 e0       	ldi	r25, 0x06	; 6
 398:	21 50       	subi	r18, 0x01	; 1
 39a:	80 40       	sbci	r24, 0x00	; 0
 39c:	90 40       	sbci	r25, 0x00	; 0
 39e:	e1 f7       	brne	.-8      	; 0x398 <main+0x7e>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <main+0x88>
 3a2:	00 00       	nop
		_delay_ms(500);

}
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	08 95       	ret

000003aa <__divmodhi4>:
 3aa:	97 fb       	bst	r25, 7
 3ac:	07 2e       	mov	r0, r23
 3ae:	16 f4       	brtc	.+4      	; 0x3b4 <__divmodhi4+0xa>
 3b0:	00 94       	com	r0
 3b2:	07 d0       	rcall	.+14     	; 0x3c2 <__divmodhi4_neg1>
 3b4:	77 fd       	sbrc	r23, 7
 3b6:	09 d0       	rcall	.+18     	; 0x3ca <__divmodhi4_neg2>
 3b8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__udivmodhi4>
 3bc:	07 fc       	sbrc	r0, 7
 3be:	05 d0       	rcall	.+10     	; 0x3ca <__divmodhi4_neg2>
 3c0:	3e f4       	brtc	.+14     	; 0x3d0 <__divmodhi4_exit>

000003c2 <__divmodhi4_neg1>:
 3c2:	90 95       	com	r25
 3c4:	81 95       	neg	r24
 3c6:	9f 4f       	sbci	r25, 0xFF	; 255
 3c8:	08 95       	ret

000003ca <__divmodhi4_neg2>:
 3ca:	70 95       	com	r23
 3cc:	61 95       	neg	r22
 3ce:	7f 4f       	sbci	r23, 0xFF	; 255

000003d0 <__divmodhi4_exit>:
 3d0:	08 95       	ret

000003d2 <__udivmodhi4>:
 3d2:	aa 1b       	sub	r26, r26
 3d4:	bb 1b       	sub	r27, r27
 3d6:	51 e1       	ldi	r21, 0x11	; 17
 3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <__udivmodhi4_ep>

000003da <__udivmodhi4_loop>:
 3da:	aa 1f       	adc	r26, r26
 3dc:	bb 1f       	adc	r27, r27
 3de:	a6 17       	cp	r26, r22
 3e0:	b7 07       	cpc	r27, r23
 3e2:	10 f0       	brcs	.+4      	; 0x3e8 <__udivmodhi4_ep>
 3e4:	a6 1b       	sub	r26, r22
 3e6:	b7 0b       	sbc	r27, r23

000003e8 <__udivmodhi4_ep>:
 3e8:	88 1f       	adc	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	5a 95       	dec	r21
 3ee:	a9 f7       	brne	.-22     	; 0x3da <__udivmodhi4_loop>
 3f0:	80 95       	com	r24
 3f2:	90 95       	com	r25
 3f4:	bc 01       	movw	r22, r24
 3f6:	cd 01       	movw	r24, r26
 3f8:	08 95       	ret

000003fa <_exit>:
 3fa:	f8 94       	cli

000003fc <__stop_program>:
 3fc:	ff cf       	rjmp	.-2      	; 0x3fc <__stop_program>
