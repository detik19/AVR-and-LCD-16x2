
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000031c  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000079e  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002c1  00000000  00000000  00000bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000037f  00000000  00000000  00000e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b8  00000000  00000000  0000121c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001df  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000208  00000000  00000000  000014b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000016bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 37 01 	call	0x26e	; 0x26e <main>
  7a:	0c 94 8c 01 	jmp	0x318	; 0x318 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcdcmd>:
#include "lcd16.h"
#include <util/delay.h>
void lcdcmd(unsigned char Data)
{

	PORTB &= ~RS; //because sending command
  82:	c0 98       	cbi	0x18, 0	; 24
	PORTB  &=~EN;
  84:	c2 98       	cbi	0x18, 2	; 24
	PORTB &=~RW;
  86:	c1 98       	cbi	0x18, 1	; 24
	PORTB &= 0x0f;
  88:	98 b3       	in	r25, 0x18	; 24
  8a:	9f 70       	andi	r25, 0x0F	; 15
  8c:	98 bb       	out	0x18, r25	; 24

	PORTB |= ((Data ) & 0xf0);
  8e:	98 b3       	in	r25, 0x18	; 24
  90:	28 2f       	mov	r18, r24
  92:	20 7f       	andi	r18, 0xF0	; 240
  94:	92 2b       	or	r25, r18
  96:	98 bb       	out	0x18, r25	; 24
	PORTB &=~RW;
  98:	c1 98       	cbi	0x18, 1	; 24
	PORTB  |=EN;
  9a:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	e3 ef       	ldi	r30, 0xF3	; 243
  9e:	f1 e0       	ldi	r31, 0x01	; 1
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcdcmd+0x1e>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <lcdcmd+0x24>
  a6:	00 00       	nop
	_delay_ms(2);
	PORTB  &=~EN;
  a8:	c2 98       	cbi	0x18, 2	; 24

	PORTB &= 0x0f;
  aa:	98 b3       	in	r25, 0x18	; 24
  ac:	9f 70       	andi	r25, 0x0F	; 15
  ae:	98 bb       	out	0x18, r25	; 24

	PORTB  |= ((Data<<4) &  0xf0);
  b0:	28 b3       	in	r18, 0x18	; 24
  b2:	f0 e1       	ldi	r31, 0x10	; 16
  b4:	8f 9f       	mul	r24, r31
  b6:	c0 01       	movw	r24, r0
  b8:	11 24       	eor	r1, r1
  ba:	82 2b       	or	r24, r18
  bc:	88 bb       	out	0x18, r24	; 24
	PORTB  |=EN;
  be:	c2 9a       	sbi	0x18, 2	; 24
  c0:	83 ef       	ldi	r24, 0xF3	; 243
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcdcmd+0x42>
  c8:	00 c0       	rjmp	.+0      	; 0xca <lcdcmd+0x48>
  ca:	00 00       	nop
	_delay_ms(2);
	PORTB  &=~EN;
  cc:	c2 98       	cbi	0x18, 2	; 24
  ce:	08 95       	ret

000000d0 <lcdData>:


}
void lcdData(unsigned char l)
{
	PORTB |=RS;  //because sending data
  d0:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &=~RW;
  d2:	c1 98       	cbi	0x18, 1	; 24
	PORTB  &=~EN;
  d4:	c2 98       	cbi	0x18, 2	; 24
	PORTB &= 0x0f;
  d6:	98 b3       	in	r25, 0x18	; 24
  d8:	9f 70       	andi	r25, 0x0F	; 15
  da:	98 bb       	out	0x18, r25	; 24
	PORTB |=((l ) & 0xf0);
  dc:	98 b3       	in	r25, 0x18	; 24
  de:	28 2f       	mov	r18, r24
  e0:	20 7f       	andi	r18, 0xF0	; 240
  e2:	92 2b       	or	r25, r18
  e4:	98 bb       	out	0x18, r25	; 24
	PORTB &=~RW;
  e6:	c1 98       	cbi	0x18, 1	; 24
	PORTB  |=EN;
  e8:	c2 9a       	sbi	0x18, 2	; 24
  ea:	e3 ef       	ldi	r30, 0xF3	; 243
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <lcdData+0x1e>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcdData+0x24>
  f4:	00 00       	nop
	_delay_ms(2);
	PORTB  &=~EN;
  f6:	c2 98       	cbi	0x18, 2	; 24
	PORTB &= 0x0f;
  f8:	98 b3       	in	r25, 0x18	; 24
  fa:	9f 70       	andi	r25, 0x0F	; 15
  fc:	98 bb       	out	0x18, r25	; 24
	PORTB  |= ((l<<4) &  0xf0);
  fe:	28 b3       	in	r18, 0x18	; 24
 100:	f0 e1       	ldi	r31, 0x10	; 16
 102:	8f 9f       	mul	r24, r31
 104:	c0 01       	movw	r24, r0
 106:	11 24       	eor	r1, r1
 108:	82 2b       	or	r24, r18
 10a:	88 bb       	out	0x18, r24	; 24
	PORTB  |=EN;
 10c:	c2 9a       	sbi	0x18, 2	; 24
 10e:	83 ef       	ldi	r24, 0xF3	; 243
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcdData+0x42>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcdData+0x48>
 118:	00 00       	nop
	_delay_ms(2);
	PORTB  &=~EN;
 11a:	c2 98       	cbi	0x18, 2	; 24
 11c:	08 95       	ret

0000011e <lcdInit>:

}

void lcdInit(void)
{
	PORTB &=~RS;
 11e:	c0 98       	cbi	0x18, 0	; 24
	PORTB  &=~EN;
 120:	c2 98       	cbi	0x18, 2	; 24
	PORTB &=~RW;
 122:	c1 98       	cbi	0x18, 1	; 24
	PORTB |= 0x30;
 124:	88 b3       	in	r24, 0x18	; 24
 126:	80 63       	ori	r24, 0x30	; 48
 128:	88 bb       	out	0x18, r24	; 24
 12a:	8f e0       	ldi	r24, 0x0F	; 15
 12c:	97 e2       	ldi	r25, 0x27	; 39
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcdInit+0x10>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcdInit+0x16>
 134:	00 00       	nop
	_delay_ms(40);
	PORTB  |=EN;
 136:	c2 9a       	sbi	0x18, 2	; 24
	PORTB  &=~EN;
 138:	c2 98       	cbi	0x18, 2	; 24
 13a:	81 ee       	ldi	r24, 0xE1	; 225
 13c:	94 e0       	ldi	r25, 0x04	; 4
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcdInit+0x20>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcdInit+0x26>
 144:	00 00       	nop
	_delay_ms(5);
	PORTB  |=EN;
 146:	c2 9a       	sbi	0x18, 2	; 24
	PORTB  &=~EN;
 148:	c2 98       	cbi	0x18, 2	; 24
 14a:	81 ee       	ldi	r24, 0xE1	; 225
 14c:	94 e0       	ldi	r25, 0x04	; 4
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <lcdInit+0x30>
 152:	00 c0       	rjmp	.+0      	; 0x154 <lcdInit+0x36>
 154:	00 00       	nop
	_delay_ms(5);
	PORTB  |=EN;
 156:	c2 9a       	sbi	0x18, 2	; 24
	PORTB  &=~EN;
 158:	c2 98       	cbi	0x18, 2	; 24
 15a:	83 ef       	ldi	r24, 0xF3	; 243
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <lcdInit+0x40>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcdInit+0x46>
 164:	00 00       	nop
	_delay_ms(2);

	PORTB &= 0x20;
 166:	88 b3       	in	r24, 0x18	; 24
 168:	80 72       	andi	r24, 0x20	; 32
 16a:	88 bb       	out	0x18, r24	; 24
	PORTB  |=EN;
 16c:	c2 9a       	sbi	0x18, 2	; 24
	PORTB  &=~EN;
 16e:	c2 98       	cbi	0x18, 2	; 24
	lcdcmd(0x28);   //set data length 4 bit 2 line
 170:	88 e2       	ldi	r24, 0x28	; 40
 172:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
 176:	83 ed       	ldi	r24, 0xD3	; 211
 178:	90 e3       	ldi	r25, 0x30	; 48
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcdInit+0x5c>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <lcdInit+0x62>
 180:	00 00       	nop
	_delay_ms(50);
	lcdcmd(0x0E);   // set display on cursor on blink on
 182:	8e e0       	ldi	r24, 0x0E	; 14
 184:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
 188:	83 ed       	ldi	r24, 0xD3	; 211
 18a:	90 e3       	ldi	r25, 0x30	; 48
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcdInit+0x6e>
 190:	00 c0       	rjmp	.+0      	; 0x192 <lcdInit+0x74>
 192:	00 00       	nop
	_delay_ms(50);
	lcdcmd(0x01); // clear lcd
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
 19a:	83 ed       	ldi	r24, 0xD3	; 211
 19c:	90 e3       	ldi	r25, 0x30	; 48
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcdInit+0x80>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcdInit+0x86>
 1a4:	00 00       	nop
	_delay_ms(50);
	lcdcmd(0x06);  // cursor shift direction
 1a6:	86 e0       	ldi	r24, 0x06	; 6
 1a8:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
 1ac:	83 ed       	ldi	r24, 0xD3	; 211
 1ae:	90 e3       	ldi	r25, 0x30	; 48
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcdInit+0x92>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcdInit+0x98>
 1b6:	00 00       	nop
	_delay_ms(50);
	lcdcmd(0x80);  //set ram address
 1b8:	80 e8       	ldi	r24, 0x80	; 128
 1ba:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
 1be:	83 ed       	ldi	r24, 0xD3	; 211
 1c0:	90 e3       	ldi	r25, 0x30	; 48
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcdInit+0xa4>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcdInit+0xaa>
 1c8:	00 00       	nop
 1ca:	08 95       	ret

000001cc <prints>:
}



void prints(const char *s)
{
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	ec 01       	movw	r28, r24

	while (*s)
 1d2:	88 81       	ld	r24, Y
 1d4:	88 23       	and	r24, r24
 1d6:	31 f0       	breq	.+12     	; 0x1e4 <prints+0x18>
 1d8:	21 96       	adiw	r28, 0x01	; 1
	{
		lcdData(*s);
 1da:	0e 94 68 00 	call	0xd0	; 0xd0 <lcdData>


void prints(const char *s)
{

	while (*s)
 1de:	89 91       	ld	r24, Y+
 1e0:	81 11       	cpse	r24, r1
 1e2:	fb cf       	rjmp	.-10     	; 0x1da <prints+0xe>
	{
		lcdData(*s);
		s++;
	}
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <gotoXy>:

void gotoXy(unsigned char  x,unsigned char y)
{
	if(x<40)
 1ea:	88 32       	cpi	r24, 0x28	; 40
 1ec:	28 f4       	brcc	.+10     	; 0x1f8 <gotoXy+0xe>
	{
		if(y) x |= 0x40;
 1ee:	61 11       	cpse	r22, r1
 1f0:	80 64       	ori	r24, 0x40	; 64
		x |=0x80;
		lcdcmd(x);
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
 1f8:	08 95       	ret

000001fa <integerToLcd>:
	}

}
void integerToLcd(int integer )
{
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	ec 01       	movw	r28, r24

	unsigned char thousands,hundreds,tens,ones;
	thousands = integer / 1000;
 204:	68 ee       	ldi	r22, 0xE8	; 232
 206:	73 e0       	ldi	r23, 0x03	; 3
 208:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__divmodhi4>
 20c:	16 2f       	mov	r17, r22

	lcdData(thousands + 0x30);
 20e:	80 e3       	ldi	r24, 0x30	; 48
 210:	86 0f       	add	r24, r22
 212:	0e 94 68 00 	call	0xd0	; 0xd0 <lcdData>

	hundreds = ((integer - thousands*1000)-1) / 100;
 216:	28 e1       	ldi	r18, 0x18	; 24
 218:	3c ef       	ldi	r19, 0xFC	; 252
 21a:	12 9f       	mul	r17, r18
 21c:	c0 01       	movw	r24, r0
 21e:	13 9f       	mul	r17, r19
 220:	90 0d       	add	r25, r0
 222:	11 24       	eor	r1, r1
 224:	8c 0f       	add	r24, r28
 226:	9d 1f       	adc	r25, r29
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	04 e6       	ldi	r16, 0x64	; 100
 22c:	10 e0       	ldi	r17, 0x00	; 0
 22e:	b8 01       	movw	r22, r16
 230:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__divmodhi4>

	lcdData( hundreds + 0x30);
 234:	80 e3       	ldi	r24, 0x30	; 48
 236:	86 0f       	add	r24, r22
 238:	0e 94 68 00 	call	0xd0	; 0xd0 <lcdData>
	tens=(integer%100)/10;
 23c:	ce 01       	movw	r24, r28
 23e:	b8 01       	movw	r22, r16
 240:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__divmodhi4>
 244:	0a e0       	ldi	r16, 0x0A	; 10
 246:	10 e0       	ldi	r17, 0x00	; 0
 248:	b8 01       	movw	r22, r16
 24a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__divmodhi4>

	lcdData( tens + 0x30);
 24e:	80 e3       	ldi	r24, 0x30	; 48
 250:	86 0f       	add	r24, r22
 252:	0e 94 68 00 	call	0xd0	; 0xd0 <lcdData>
	ones=integer%10;
 256:	ce 01       	movw	r24, r28
 258:	b8 01       	movw	r22, r16
 25a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__divmodhi4>

	lcdData( ones + 0x30);
 25e:	80 5d       	subi	r24, 0xD0	; 208
 260:	0e 94 68 00 	call	0xd0	; 0xd0 <lcdData>
}
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	08 95       	ret

0000026e <main>:
int main(void)
{
		
	
	unsigned int temp;
	DDRA = 0xFE;		//set the PORTA Direction Set every pin of PORTA as out except AN0 
 26e:	8e ef       	ldi	r24, 0xFE	; 254
 270:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;		//set the PORTB Direction Set every pin of PORTB as out as our lcd on this
 272:	8f ef       	ldi	r24, 0xFF	; 255
 274:	87 bb       	out	0x17, r24	; 23
	

	
	
	lcdInit();
 276:	0e 94 8f 00 	call	0x11e	; 0x11e <lcdInit>


	prints("LCD ATMEGA16");
 27a:	80 e6       	ldi	r24, 0x60	; 96
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <prints>
 282:	2f e7       	ldi	r18, 0x7F	; 127
 284:	8a e1       	ldi	r24, 0x1A	; 26
 286:	96 e0       	ldi	r25, 0x06	; 6
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <main+0x1a>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x24>
 292:	00 00       	nop
	_delay_ms(500);
    	while(1)
    	{	
		
		ADCSRA |= 0x40;			// start the adc conversion on AN0
 294:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & 0x40);
 296:	36 99       	sbic	0x06, 6	; 6
 298:	fe cf       	rjmp	.-4      	; 0x296 <main+0x28>
		temp = ADC;
 29a:	c4 b1       	in	r28, 0x04	; 4
 29c:	d5 b1       	in	r29, 0x05	; 5

		gotoXy(1,1 );			//set the cursor to 1 column of 1st row
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 f5 00 	call	0x1ea	; 0x1ea <gotoXy>
		prints("ADC = ");		
 2a6:	8d e6       	ldi	r24, 0x6D	; 109
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 e6 00 	call	0x1cc	; 0x1cc <prints>
		integerToLcd(temp);		// print adc value to the lcd
 2ae:	ce 01       	movw	r24, r28
 2b0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <integerToLcd>
 2b4:	2f e7       	ldi	r18, 0x7F	; 127
 2b6:	89 ea       	ldi	r24, 0xA9	; 169
 2b8:	93 e0       	ldi	r25, 0x03	; 3
 2ba:	21 50       	subi	r18, 0x01	; 1
 2bc:	80 40       	sbci	r24, 0x00	; 0
 2be:	90 40       	sbci	r25, 0x00	; 0
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <main+0x4c>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <main+0x56>
 2c4:	00 00       	nop
 2c6:	e6 cf       	rjmp	.-52     	; 0x294 <main+0x26>

000002c8 <__divmodhi4>:
 2c8:	97 fb       	bst	r25, 7
 2ca:	07 2e       	mov	r0, r23
 2cc:	16 f4       	brtc	.+4      	; 0x2d2 <__divmodhi4+0xa>
 2ce:	00 94       	com	r0
 2d0:	07 d0       	rcall	.+14     	; 0x2e0 <__divmodhi4_neg1>
 2d2:	77 fd       	sbrc	r23, 7
 2d4:	09 d0       	rcall	.+18     	; 0x2e8 <__divmodhi4_neg2>
 2d6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__udivmodhi4>
 2da:	07 fc       	sbrc	r0, 7
 2dc:	05 d0       	rcall	.+10     	; 0x2e8 <__divmodhi4_neg2>
 2de:	3e f4       	brtc	.+14     	; 0x2ee <__divmodhi4_exit>

000002e0 <__divmodhi4_neg1>:
 2e0:	90 95       	com	r25
 2e2:	81 95       	neg	r24
 2e4:	9f 4f       	sbci	r25, 0xFF	; 255
 2e6:	08 95       	ret

000002e8 <__divmodhi4_neg2>:
 2e8:	70 95       	com	r23
 2ea:	61 95       	neg	r22
 2ec:	7f 4f       	sbci	r23, 0xFF	; 255

000002ee <__divmodhi4_exit>:
 2ee:	08 95       	ret

000002f0 <__udivmodhi4>:
 2f0:	aa 1b       	sub	r26, r26
 2f2:	bb 1b       	sub	r27, r27
 2f4:	51 e1       	ldi	r21, 0x11	; 17
 2f6:	07 c0       	rjmp	.+14     	; 0x306 <__udivmodhi4_ep>

000002f8 <__udivmodhi4_loop>:
 2f8:	aa 1f       	adc	r26, r26
 2fa:	bb 1f       	adc	r27, r27
 2fc:	a6 17       	cp	r26, r22
 2fe:	b7 07       	cpc	r27, r23
 300:	10 f0       	brcs	.+4      	; 0x306 <__udivmodhi4_ep>
 302:	a6 1b       	sub	r26, r22
 304:	b7 0b       	sbc	r27, r23

00000306 <__udivmodhi4_ep>:
 306:	88 1f       	adc	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	5a 95       	dec	r21
 30c:	a9 f7       	brne	.-22     	; 0x2f8 <__udivmodhi4_loop>
 30e:	80 95       	com	r24
 310:	90 95       	com	r25
 312:	bc 01       	movw	r22, r24
 314:	cd 01       	movw	r24, r26
 316:	08 95       	ret

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
